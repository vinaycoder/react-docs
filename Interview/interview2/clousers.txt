1. ========= props and cons of clousers
==== advantage=====
1. in common function in javascript. variable is define in this scope can access only inside that function. after execution completed we never get the that function scope : but this problem solved by clouser

2. if we define variable in global scope for reusing but it can be changed any where in the program

3. Closures are very helpful to hide the implementation details in javascript. Closures can be useful to create private variables and functions

===== Disvantage ======
1.if closures is Active it can't be garbage collection leading up to the memory leak.
	fix : 
	If there come a point in you program where you are done using closure then you need to set closure to null.
2.Creating a function inside a function leads to duplicity in memory and cause slowing down the application : 
	Fix : 
	Use closures only when you need privacy otherwise use module pattern to create new objects with shared methods.



=======problem soved====

function createClouserArr() {
  var badArr = [];
  for (var index = 0; index < 5; index++) {
    badArr[index] = function () {
      return 'n = ' + index;
    };
  }
  return badArr
}
var arr = createClouserArr()
for(var index in arr){
  console.log(arr[index]());
}
this should give n = 5 five times

:==== how to fix this problem
function createClouserArr(index) {
 return function () {    
    return 'n = ' + index;
  }
}
var badArr = [];
for (var index = 0; index < 5; index++) {
  badArr[index] = createClouserArr(index)
}

for (var index in badArr){
  console.log(badArr[index]());
}



let conterNew=function(){
let count=0;
return ()=> count++;
}();

console.log(conterNew());
console.log(conterNew());
console.log(conterNew());

this should give 0, 1 , 2


======== problem ======
const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
  setTimeout(function () {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
}
return Index: 4, element: undefined

===== Fix ===========

const arr = [10, 12, 15, 21];
for (var i = 0; i < arr.length; i++) {
 (function(i) {
  setTimeout(function() {
    console.log('Index: ' + i + ', element: ' + arr[i]);
  }, 3000);
})(i)
}
