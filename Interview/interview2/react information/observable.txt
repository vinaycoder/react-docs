1. an observable is a technic to handle ansync operation in javascript. like Promise and callback but it is different from Promise.

1. The first difference is that the Promise is eager, whereas the Observable is lazy.it just executed after it's defination.either we have subscribe the promise or not.but in obervable it will execute untill we have not subscribe

const welcomePromise = new Promise(resolve => {
  console.log("In Promise executor fn");
  resolve("Welcome!");
});

console.log("Before calling the then method");
welcomePromise.then(console.log); // then return resolve value
/***** console result ******/
In Promise executor fn
Before calling the then method
Welcome!

import { Observable } from "rxjs";

const welcomeObservable$ = new Observable(observer => {
  console.log("In Observable producer fn");
  observer.next("Welcome!");
  observer.complete();
});

console.log("Before calling the subscribe method");
welcomeObservable$.subscribe(console.log);
/***** console result **** /
// Before calling the subscribe method
// In Observable producer fn
// Welcome!

2. Single vs Multiple values
The Promise object may only deliver a single value, namely the first call of the resolve function is taken into account: the Observable instance may emit multiple values:

const newsPromise = new Promise(resolve => {
  resolve("Sports news");
  resolve("Politics news");
});
newsPromise.then(console.log);
//console output: Sports news

const news$ = new Observable(observer => {
  observer.next("Sports news");
  observer.next("Politics news");
});
news$.subscribe(console.log);

// console output: Sports news, Politics news

3. we can stop excution in observalble but not in Promise.
const periodicNews$ = new Observable(observer => {
  let i = 0;

  const interval = setInterval(() => {
    observer.next(`News ${i++}`);
  }, 2000);

  return () => clearInterval(interval);
});

const subscription = periodicNews$.subscribe(console.log);

setTimeout(() => subscription.unsubscribe(), 5000);